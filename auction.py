import time
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import InputMediaPhoto
import gspread
import json
import sqlite3 as sl
from keyboards import * 
import os
import shutil
import threading



with open ('config.json') as settings:
    config = json.load(settings)
    Token = config.get("telegram_token")
    database = config.get("database_path")
    geocoder_api = config.get("geocoder_api")
    chanel = config.get("chanel_id")
    queries = config.get("queries")

    
bot = telebot.TeleBot(Token)
con = sl.connect(database, check_same_thread=False)     #check_same_thread=False  –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
message_lock = threading.Lock()

# —Å–æ–∑–¥–∞—é —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω
administrators_dict = {}
# —Ç–µ–∫—É—â–∏–µ –ª–æ—Ç—ã, –∫–æ—Ç —É—á–∞–≤—Å—Ç–≤—É—é—Ç –≤ –∞—É–∫—Ü–∏–æ–Ω–µ
buffer = {
    "Lots_to_add": [],  # –ü–µ—Ä–µ–¥ –ø–æ—Å—Ç–æ–º –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è id –ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ "Moderation"
    "Moderation": {},  # –õ–æ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º SUPER_ADMIN –∏–ª–∏ SUPPORT
    "Approved": [],  # –õ–æ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ, –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
    "Active": {}  # –õ–æ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µ
}

#—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, —á–µ—Ä–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
handler_register =["title", "price", "geolocation", "description", "additional_info"]       

with con:
    admin_for_top_up_your_balance = con.execute(queries['find_admin_for_top_up_your_balance']).fetchone()
    #print(admin_for_top_up_your_balance)  #('@Zenagar',)
    texts_dict = { "create_lot": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ª–æ—Ç–µ:\n",
                  "title": "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",

                "media": ("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π? \n"
                        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 4. \n"
                        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ \n"
                        "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"),

                "media_1": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                "media_2": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "media_3": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                "media_4": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",

                "price": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –ª–æ—Ç–∞",

                "geolocation": "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥",

                "description": "–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ",

                "additional_info": "–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",

                "recreate_lot": "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç—ã –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ª–æ—Ç",
                "customers": "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ",
                "show_history": ("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –ª–æ—Ç–∞:\n"
                               "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–æ—Ç"),
                "show_finance": f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_for_top_up_your_balance[0]}",
                "deleting_lot": ("–ï—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –ª–æ—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ —Ç–æ –ø–ª–æ—â–∞–¥–∫–∞\n"
                               "–æ—Ç–Ω–∏–º–µ—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–∏—Å—Å–∏—é –≤ —Ä–∞–∑–º–µ—Ä–µ 5% –æ—Ç —Ç–µ–∫—É—â–µ–π\n"
                               "—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–æ—Ç–∞"),
                "/start for admin": ('–≤ –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @Auction_monett '
                                   '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ãe –¥–ª—è –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—è:'),
                "admins_settings": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:",
                "/start for user": ('–ü—Ä–∏–≤–µ—Ç ,—è –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @Auction_monett\n'
                                  '–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏ ,–∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å\n'
                                  '—Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞.–ê —Ç–∞–∫ –∂–µ –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏\n'
                                  '–±–∞–ª–∞–º–∏.\n'
                                  '–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ ü§ù'),
                "my_lots": "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ",
                "no_lots": "–í—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –ª–æ—Ç–∞—Ö",
                "rules": ("–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤,–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å —Å\n"
                        "–ø—Ä–æ–¥–∞–≤—Ü–æ–º\n"
                        "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫‚ÄºÔ∏è\n"
                        "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –¢–†–Å–• –¥–Ω–µ–π,–ø–æ—Å–ª–µ\n"
                        "–æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞üî•\n"
                        "–ù–ï –í–´–ö–£–ü –õ–û–¢–ê - –ü–ï–†–ú–ê–ù–ï–ù–¢–ù–´–ô –ë–ê–ù –í–û –í–°–ï–•\n"
                        "–ù–£–ú–ò–ó–ú–ê–¢–ò–ß–ï–°–ö–ò–• –°–û–û–ë–©–ï–°–¢–í–ê–• –ò –ê–£–ö–¶–ò–û–ù–ê–•ü§¨\n"
                        "–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞,–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚è∞\n"
                        "–ê–Ω—Ç–∏-—Å–Ω–∞–π–ø–µ—Ä - –°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–Ω–∞—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ\n"
                        "–∫–æ–Ω—Ü–∞,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç\n"
                        "–ê—É–∫—Ü–∏–æ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç –≤–ø–µ—Ä—ë–¥ ‚ÄºÔ∏è\n\n"
                        "–†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã,–∏—Ö –û—Ç–∑—ã–≤—ã —Å—É–º–º–∞—Ä–Ω–æ\n"
                        "–¥–æ—Å—Ç–∏–≥–∞—é—Ç 10000+ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö.\n"
                        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –§–æ—Ç–æ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø—Ä–æ–¥–∞–≤—Ü–∞.\n"
                        "–°–ª—É—á–∞–π–Ω–æ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É?ü§î\n"
                        "–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞–≤—Ü—É‚ÄºÔ∏è\n\n\n"
                        "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π,—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–¥ —Ñ–æ—Ç–æ.\n"
                        "–õ–æ—Ç—ã –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ç—å ,—ç–∫–æ–Ω–æ–º—è –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞ –ø–æ—á—Ç–µ.\n"
                        "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä—ë—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã‚ÄºÔ∏è"),
                "help_info": (f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã {admin_for_top_up_your_balance[0]}\n"
                            f"–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏–ª–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –ø–∏—à–∏—Ç–µ {admin_for_top_up_your_balance[0]}"),
                "names": {
                  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                  "images": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                  "price": "–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞",
                  "geolocation": "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è",
                  "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
                  "additional_info": "–î–æ–ø.–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                  },
                "save_lot": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
                "selled_lots": "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤:",

                "unselled_lots": "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –Ω–µ-–ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤:",
                "customers": "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ—Ç —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ",

                "no_customers": "–ü–æ–∫–∞ –ø–æ –≤–∞—à–∏–º –ª–æ—Ç–∞–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç",

                "show_history": ("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –ª–æ—Ç–∞:\n"
                               "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–æ—Ç"),
                }  

# –°–ª–æ–≤–∞—Ä—å –∫–æ—Ç–æ—Ä—ã–π, —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä telebot.types
actions = { 
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –õ–æ—Ç–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    #–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ "my_lots"  –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç lots –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏) –∏–∑ –º–µ—Ç–æ–¥–∞ user_participated_lots() –∫–ª–∞—Å—Å–∞ BiddingHistory.
    "my_lots": lambda lots: BiddingHistory(lots).user_participated_lots().keyboard,     
           # –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    "rules": MainMenu().get_menu().keyboard,
    # –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    "help_info": MainMenu().get_menu().keyboard,
     # –¢–µ–∫—Å—Ç –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é –∫ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –ª–æ—Ç–∞–º–∏
    "my_balance": "",
    "create_lot": Lot().creating_lot().keyboard,
    "recreate_lot": Lot().recreate_lot().keyboard,
    "title": None,
    "media": Lot().quantity_of_images().keyboard,
    "media_1": None,
    "media_2": None,
    "media_3": None,
    "media_4": None,
    "price": None,
    "geolocation": None,
    "description": None,
    "additional_info": None,
    "save_lot": Lot().saving_confirmation().keyboard,
    "selled_lots": lambda lots: BiddingHistory(lots).recreate_lot().keyboard,
    "unselled_lots": lambda lots: BiddingHistory(lots).recreate_lot().keyboard,
    "customers": lambda lots: BiddingHistory(lots).won_lot().keyboard,
    "show_history": lambda lots: BiddingHistory(lots).show().keyboard,
    "deleting_lot": lambda lots: BiddingHistory(lots).delete_lot().keyboard,
}

def update_administrator(case):
    if case == '–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤':
        with con:
            administrators = con.execute(queries['find_admins']).fetchall()
            #print(administrators)    #[(2, 4, 'SUPER_ADMIN', None, None, None, 4, '–ê—Ä–∫–∞–¥–∑—è', 'None', 451784658, '@Zenagar', None, None, None), (3, 2, 'ADMIN', None, None, None, 2, '–°–≤–µ—Ç–ª–∞–Ω–∞', '–ó–∞—Ö–∞—Ä—á—É–∫', 1252225243, None, None, None, None)]
        for admin in administrators:
            access_level = admin[2]
            phone = admin[3]
            email = admin[4]
            status = admin[5]
            first_name = admin[7]
            last_name = admin[8]
            telegram_id = admin[9]
            telegram_link = admin[10]
            balance = admin[11]
            
            administrators_dict.update({telegram_id:{'access_level':access_level,
                                                  'phone':phone,
                                                  'email':email,
                                                  'status':status,
                                                  'first_name':first_name,
                                                  'last_name':last_name,
                                                  'telegram_link':telegram_link,
                                                  'balance': balance                                             
                                                  
                                        }})

def personal_cabinet(telegram_id, type_of_message, message_id, call_id):
    
    #–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç call_id (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä callback-–∑–∞–ø—Ä–æ—Å–∞), –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è 
    # bot.answer_callback_query —Å –ø–µ—Ä–µ–¥–∞—á–µ–π callback_query_id=call_id.
    if call_id is not None:
        bot.answer_callback_query(callback_query_id=call_id, )

    if telegram_id in administrators_dict.keys():
        if administrators_dict[telegram_id]["access_level"] == "SUPER_ADMIN":
            starting = Start().is_super_admin_keyboard().keyboard
        else:
            starting = Start().is_admin_keyboard().keyboard
        name = administrators_dict[telegram_id]['first_name']
        telegram_link = administrators_dict[telegram_id]['telegram_link']
        text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {name}, {telegram_link} " + texts_dict['/start for admin']

    else:
        starting = Start().is_user_keyboard().keyboard
        text = texts_dict['/start for user']

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π send –∏–ª–∏ edit
    #–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è type_of_message –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    # —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    send = {"send": [bot.send_message, {'chat_id': telegram_id, "text": text, "reply_markup": starting}],
            "edit": [bot.edit_message_text, {'chat_id': telegram_id, 'message_id': message_id, "text": text,
                                             "reply_markup": starting}]}
    #–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ function –∏ kwargs –ø–æ–ª—É—á–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è send –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å type_of_message.
    function, kwargs = send[type_of_message][0], send[type_of_message][1]
    #–≤—ã–∑—ã–≤–∞—é —Ñ-–∏—é —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    function(**kwargs)

def cabinet_actions(button_info, telegram_id, message_id, type_of_message, call_id):
    lots, text = None, None

    if call_id is not None:
        bot.answer_callback_query(callback_query_id=call_id, )
    
    lot_info_queries = {"customers": "lot_id_title-winners",
                        "show_history": "lot_id_title",
                        "selled_lots": "get_selled_lots",
                        "unselled_lots": "get_unselled_lots"}
    if button_info in lot_info_queries.keys():
        with con:
            lots = con.execute(queries[lot_info_queries[button_info]], [telegram_id]).fetchall()

    
    if button_info == "my_lots":  # –õ–æ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ, –æ—Ç–∫—Ä—ã–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lots = []
        if buffer["Active"] is not None:
            for lot_id in buffer['Active'].keys():
                if "bids" in buffer["Active"][str(lot_id)].keys():   #—Å—Ç–∞–≤–∫–∞
                    if telegram_id in buffer["Active"][str(lot_id)]['bids'].keys():
                        with con:
                            title = con.execute(queries["lot_title"], [int(lot_id)]).fetchall()[0][0]
                        lots.append([lot_id, title])  
            
    elif button_info == "deleting_lot":  # –õ–æ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –∞–¥–º–∏–Ω —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å
        lots = []
        if buffer["Active"] is not None:
            for lot_id in buffer['Active'].keys():
                with con:
                    users_telegram_id = con.execute(queries["lot_is_users?"], [int(lot_id)]).fetchall()[0][0]
                    if users_telegram_id == telegram_id:
                        title = con.execute(queries["lot_title"], [int(lot_id)]).fetchall()[0][0]
                        lots.append([lot_id, title])   
    
    selected_action = actions[button_info]
    # —è–≤–ª—è–µ—Ç—Å—è –ª–∏ selected_action –≤—ã–∑—ã–≤–∞–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º, —Ç–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–ª–∏ –º–µ—Ç–æ–¥–æ–º.
    if callable(selected_action):  # callable() - —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ Python, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω, –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
        selected_action = selected_action(lots)   #–≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞—è lots –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.
        
    if button_info == 'rules':
        text = texts_dict["rules"]    
    if button_info == 'help_info':
        text = texts_dict["help_info"]  
    elif button_info == "my_lots":  # —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –ª–æ—Ç–æ–≤ –Ω–µ—Ç, –ø—É—Ç—ë–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if len(selected_action.keyboard) == 1:
            text = texts_dict["no_lots"]   #–≤–º–µ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ª–æ—Ç–∞–º–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        text = texts_dict[button_info]
        #–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if button_info == "create_lot":
        if "new_lot" not in administrators_dict[telegram_id].keys():
            administrators_dict[telegram_id].update(
                {
                    "new_lot":
                        {
                            "title": None,
                            "images": None,
                            "price": None,
                            "geolocation": None,
                            "description": None,
                            "additional_info": None
                        }
                }
            )

        # –¶–∏–∫–ª –∫–æ—Ç–æ—Ä—ã–π, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for key, value in administrators_dict[telegram_id]["new_lot"].items():
            if key != "images" and value is None:
                value = "–ù–µ—Ç"
            elif key == "images":
                image_directory = f"Media/{telegram_id}"
                if os.path.exists(image_directory):
                    image_quantity = len(os.listdir(image_directory))
                    value = image_quantity
                else:
                    value = "–ù–µ—Ç"
            text += f"{texts_dict['names'][key]}: {value}\n" 
            print(text)
                        
    send = {"send": [bot.send_message, {'chat_id': telegram_id, "text": text, "reply_markup": selected_action}],
            "edit": [bot.edit_message_text, {'chat_id': telegram_id, 'message_id': message_id, "text": text,
                                             "reply_markup": selected_action}]}

    function, kwargs = send[type_of_message][0], send[type_of_message][1]
    function(**kwargs)
    
def creating_lot(button_info, telegram_id, message_id, message, call_id):
    if call_id is not None:
        bot.answer_callback_query(callback_query_id=call_id, )
#–ï—Å–ª–∏ button_info –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "media_", –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–∫–Ω–æ–ø–æ–∫(—Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–∞–ø–∫–∞ folder_path –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, 
# –∏ –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç—Å—è.) –≤ —Å–ª–æ–≤–∞—Ä–µ administrators_dict –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º –ª–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
# —É–∫–∞–∑—ã–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    if button_info.startswith("media_"):
        folder_path = f"Media/{str(telegram_id)}"
        if os.path.exists(folder_path):
            shutil.rmtree(folder_path)
        administrators_dict[telegram_id]["new_lot"]["images"] = int(button_info[-1])

    selected_action = actions[button_info]
    text = texts_dict[button_info]

    bot.edit_message_text(chat_id=telegram_id, message_id=message_id, text=text, reply_markup=selected_action)
#–ï—Å–ª–∏ button_info —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ handler_register –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è bot.register_next_step_handler() –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ get_info. –ü–æ–ª—É—á–∞—é –¥–æ–ø –∏–Ω—Ñ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞.
    if button_info in handler_register:
        bot.register_next_step_handler(message, get_info, button_info)
        
def recreate_lot(telegram_id, lot_id, message_id, call_id):
    if lot_id not in buffer["Lots_to_add"]:

        bot.answer_callback_query(callback_query_id=call_id, text="–õ–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
        info = "–õ–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º"

    else:

        bot.answer_callback_query(callback_query_id=call_id, text="–õ–æ—Ç —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
        info = "–õ–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"

    main_menu = MainMenu().get_menu().keyboard
    bot.edit_message_text(chat_id=telegram_id, message_id=message_id, text=info, reply_markup=main_menu)
    
    
   #—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –ø–∞–ø–∫—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ª–æ—Ç–∞ 
def save_lot(telegram_id, message_id, call_id):
    #–ò–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–µ 
    title = administrators_dict[telegram_id]["new_lot"]["title"]
    price = administrators_dict[telegram_id]["new_lot"]["price"]
    geolocation = administrators_dict[telegram_id]["new_lot"]["geolocation"]
    description = administrators_dict[telegram_id]["new_lot"]["description"]
    add_info = administrators_dict[telegram_id]["new_lot"]["additional_info"]

    if title is None or price is None or geolocation is None or description is None:
        bot.answer_callback_query(callback_query_id=call_id, text="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
    else:
        #–∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (users_id) –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (admin_id)
        with con:
            users_id = con.execute(queries["searching_user"], [telegram_id]).fetchall()[0][0]
            admin_id = con.execute(queries["admin_id"], [users_id]).fetchall()[0][0]
            #–í—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ª–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö 
            con.execute(queries["save_lot"], [admin_id, title, geolocation, price, description, add_info])
            #–ü–æ–ª—É—á–∞–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞ (lot_id) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            lot_id = con.execute(queries["lot_id"], [admin_id]).fetchall()[-1][0]
        
        source_directory = f"Media/{str(telegram_id)}"

        directory = "Lots/"
        folder_name = str(lot_id)
        folder_path = os.path.join(directory, folder_name)
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
        #–°–æ–∑–¥–∞–µ—Ç—Å—è –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ—Ç–∞ —Å –∏–º–µ–Ω–µ–º, —Ä–∞–≤–Ω—ã–º lot_id, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        target_directory = f"Lots/{str(lot_id)}"
        file_list = os.listdir(source_directory)
        #–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ (Media/{telegram_id}) –≤ –ø–∞–ø–∫—É –ª–æ—Ç–∞ (Lots/{lot_id}) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ shutil
        for file_name in file_list:
            source_path = os.path.join(source_directory, file_name)
            target_path = os.path.join(target_directory, file_name)
            shutil.move(source_path, target_path)
        #–ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ (Media/{telegram_id}) —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ —É–¥–∞–ª—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é shutil.rmtree.
        if os.path.exists(source_directory):
            shutil.rmtree(source_directory)
        #—Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞, –ø—Ä–æ—Ö–æ–¥—è –ø–æ —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ –ª–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è—è –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ image_links.
        image_links = []

        for filename in os.listdir(target_directory):
            if filename.endswith('.jpg') or filename.endswith('.png'):
                image_link = f"{target_directory}/{filename}"
                image_links.append(image_link)
        #–ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with con:
            for link in image_links:
                con.execute(queries["lot_upload_links"], [lot_id, link])
        #–£–¥–∞–ª—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º –ª–æ—Ç–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è administrators_dict
        del administrators_dict[telegram_id]["new_lot"]

        bot.answer_callback_query(callback_query_id=call_id, text="–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

        buffer["Lots_to_add"].append(lot_id)

        personal_cabinet(telegram_id, "edit", message_id, None)

def get_info(message, button_info):
    telegram_id = message.from_user.id
    message_id = message.chat.id
    administrators_dict[telegram_id]["new_lot"][button_info] = message.text
    cabinet_actions("create_lot", telegram_id, message_id, "send", None)
    
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –ª–æ—Ç–∞
def winner_info(telegram_id, message_id, lot_id, call_id):
    bot.answer_callback_query(callback_query_id=call_id, )

    with con:
        winners_link = con.execute(queries["get_winners_link"], [lot_id]).fetchall()[0][0]
        user_id = con.execute(queries["get_winners_id"], [lot_id]).fetchall()[0][0]
        lot_title = con.execute(queries["lot_title"], [lot_id]).fetchall()[0][0]

    text = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –ª–æ—Ç–∞: \n {lot_title} \n —è–≤–ª—è–µ—Ç—Å—è: {winners_link}"

    keyboard = BiddingHistory(user_id).winner().keyboard

    bot.edit_message_text(chat_id=telegram_id, message_id=message_id, text=text, reply_markup=keyboard)
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
def show_history(telegram_id, message_id, lot_id, call_id):
    bot.answer_callback_query(callback_query_id=call_id, )

    if str(lot_id) in buffer["Active"].keys():
        keyboard = BiddingHistory("ACTIVE_LOT").delete_bid().keyboard
    else:
        keyboard = BiddingHistory(None).delete_bid().keyboard

    with con:
        bids_info = con.execute(queries["get_bids_by_lot"], [lot_id]).fetchall()

    if bids_info:
        text = "–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—à–µ–º—É –ª–æ—Ç—É:\n"
        for info in bids_info:
            users_link, bid_amount, bid_date = info[0], info[1], info[2]
            text += f"{users_link}: {bid_amount} - {bid_date}\n"
    else:
        text = "–°—Ç–∞–≤–æ–∫ –ø–æ –≤–∞—à–µ–º—É –ª–æ—Ç—É –ø–æ–∫–∞ –Ω–µ—Ç"

    bot.edit_message_text(chat_id=telegram_id, message_id=message_id, text=text, reply_markup=keyboard)
    
# –§—É–Ω–∫—Ü–∏—è lot_information –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ª–æ—Ç—É
def lot_information(lot_id):
    with con:
        lot_info = con.execute(queries["get_lot_info"], [lot_id]).fetchall()[0]
        lot_title, lot_price, lot_geolocation = lot_info[0], str(lot_info[1]), lot_info[2]
        lot_description, lot_additional_info, sellers_link = lot_info[3], lot_info[4], lot_info[5]

    if lot_additional_info is not None:
        text = (lot_title + "\n" +
                lot_geolocation + "\n" +
                lot_description + "\n" +
                lot_additional_info + "\n" +
                ("–ü—Ä–æ–¥–∞–≤–µ—Ü " + sellers_link) + "\n\n")
    else:
        text = (lot_title + "\n" +
                lot_price + "\n" +
                lot_geolocation + "\n" +
                lot_description + "\n" +
                ("–ü—Ä–æ–¥–∞–≤–µ—Ü " + sellers_link) + "\n\n")
    return text
    
def delete_lot(telegram_id, message_id, lot_id, call_id):
    message = "üö´–í—ã —É–¥–∞–ª–∏–ª–∏ –ª–æ—Ç"
    bot.answer_callback_query(callback_query_id=call_id, text=message)

    lot_message = buffer["Active"][str(lot_id)]["message"]
    text = lot_information(lot_id)

    if 'bids' in buffer["Active"][str(lot_id)].keys():
        lot_price = max(buffer["Active"][str(lot_id)]["bids"].values())
        text += "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: " + str(lot_price + 100) + "‚ÇΩ"

    else:
        with con:
            lot_price = con.execute(queries['lot_price'], [lot_id]).fetchall()[0][0]
        text += "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞: " + str(lot_price) + "‚ÇΩ"

    with con:
        balance = con.execute(queries['get_balance'], [telegram_id]).fetchall()[0][0]
        commission = lot_price / 100 * 5
        new_balance = balance - commission
        con.execute(queries['set_balance'], [new_balance, telegram_id])

    text += "\n\nüëÆ‚Äç‚ôÄÔ∏è–õ–æ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"

    bot.edit_message_reply_markup(chat_id=chanel, message_id=lot_message, reply_markup=None)
    bot.edit_message_caption(caption=text, chat_id=chanel, message_id=lot_message)

    if "user_opened" in buffer["Active"][str(lot_id)].keys():
        for user_id, message_id in buffer["Active"][str(lot_id)]["user_opened"].items():
            bot.edit_message_reply_markup(chat_id=user_id, message_id=message_id, reply_markup=None)
            bot.edit_message_caption(caption=text, chat_id=user_id, message_id=message_id)

    personal_cabinet(telegram_id, 'edit', message_id, None)

    
@bot.message_handler(content_types=['photo'])
def handle_image(message):
    telegram_id = message.from_user.id
    message_id = message.chat.id
    if "new_lot" in administrators_dict[telegram_id].keys():
        
        #–º–µ—Ç–æ–¥—ã acquire() –∏ release() –æ–±—ä–µ–∫—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –Ω—É–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∫–æ–¥–∞.
        #–∫–æ–¥, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º –ø–æ—Ç–æ–∫–æ–º –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
        
        message_lock.acquire()
        directory = "Media/"
        folder_name = str(telegram_id)
        folder_path = os.path.join(directory, folder_name)

        if not os.path.exists(folder_path):
            os.makedirs(folder_path)

        if administrators_dict[telegram_id]["new_lot"]["images"] is not None:
            try:
                count = administrators_dict[telegram_id]["new_lot"]["images"]
                photo = message.photo[-1]
                file_info = bot.get_file(photo.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                file_name = f'image_{photo.file_unique_id}.jpg'
                file_path = os.path.join(folder_path, file_name)

                with open(file_path, 'wb') as new_file:
                    new_file.write(downloaded_file)

                bot.reply_to(message, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')

                count -= 1
                administrators_dict[telegram_id]["new_lot"]["images"] = count
                if count == 0:
                    administrators_dict[telegram_id]["new_lot"]["images"] = None
                    print(administrators_dict)
                    cabinet_actions("create_lot", telegram_id, message_id, "send", None)
            finally:
                message_lock.release()
        else:
            message_lock.release()

@bot.message_handler(content_types=['text'])

def start(message):
    #print(message)
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    telegram_id = message.from_user.id
    if message.from_user.username == None:
        telegram_link = None
    else:
        telegram_link = "@" + message.from_user.username
    menu = {'/start':personal_cabinet, '/help':''}
    
    with con:
        searching = con.execute(queries['find_user'], [telegram_id]).fetchall()
        
        if not searching:    #–µ—Å–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            con.execute(queries['add_user'], [first_name, last_name, telegram_id, telegram_link])
    if message.text in menu.keys():
        #–î–æ–±–∞–≤–ª—è—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è 1 –∏ 2 –≤ —Å–ø–∏—Å–æ–∫ buffer["Lots_to_add"]
        buffer["Lots_to_add"].append(1), buffer["Lots_to_add"].append(2)
        #–í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è menu
        menu[message.text](telegram_id, "send", None, None)
            
    
    
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    #bot.answer_callback_query(callback_query_id=call.id, )
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    call.data = json.loads(call.data)
    #print(call.data)   #['/start', 'rules']
    flag, button_info = call.data[0], call.data[1]
    
    callback = {'/home': (personal_cabinet, (chat_id, "edit", message_id, call.id)),
                '/start': (cabinet_actions, (button_info, chat_id, message_id, "edit", call.id)),
                '/lot': (creating_lot, (button_info, chat_id, message_id, call.message, call.id)),
                '/recreate': (recreate_lot, (chat_id, button_info, message_id, call.id)),
                '/save': (save_lot, (chat_id, message_id, call.id)),
                '/customer': (winner_info, (chat_id, message_id, button_info, call.id)),
                '/history': (show_history, (chat_id, message_id, button_info, call.id)),
                '/delete': (delete_lot, (chat_id, message_id, button_info, call.id)),
                }
    
    function, args = callback[flag][0], callback[flag][1]

    function(*args)
    
  
print("Ready")
update_administrator(case='–û–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')
bot.infinity_polling()